(window.webpackJsonp=window.webpackJsonp||[]).push([[422],{610:function(t,a,s){"use strict";s.r(a);var r=s(0),n=Object(r.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue-router-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-3","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue-Router(3)")]),t._v(" "),s("h2",{attrs:{id:"vue-router实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-router实现原理","aria-hidden":"true"}},[t._v("#")]),t._v(" vue-router实现原理")]),t._v(" "),s("h3",{attrs:{id:"_1-spa的核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-spa的核心","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. SPA的核心")]),t._v(" "),s("p",[t._v("要想清楚的理解路由的核心就要先知道"),s("code",[t._v("SPA")]),t._v("是什么："),s("font",{attrs:{color:"#1E90FF"}},[t._v("SPA(single page application)单页应用是只有一个完整的页面，加载页面的时候不会加载整个页面，"),s("font",{attrs:{color:"#DD1144"}},[t._v("而是只更新某个指定的容器（组件）的内容")]),t._v("，所以单页面应用的核心之一是："),s("font",{attrs:{color:"#DD1144"}},[t._v("更新视图而不重新请求页面")])],1),t._v("，"),s("code",[t._v("vue-router")]),t._v("在实现单页面前端路由的时候，提供了两种方式，"),s("font",{attrs:{color:"#3eaf7c"}},[t._v("Hash模式")]),t._v(" 和 "),s("font",{attrs:{color:"#3eaf7c"}},[t._v("History模式")]),t._v("，两种默认根据在"),s("code",[t._v("Vue-Router")]),t._v("的"),s("code",[t._v("mode")]),t._v("参数来决定采用哪一种方式。")],1),t._v(" "),s("h3",{attrs:{id:"_2-hash模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-hash模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Hash模式")]),t._v(" "),s("p",[s("font",{attrs:{color:"#9400D3"}},[s("strong",[t._v("① Hash原理")])])],1),t._v(" "),s("ul",[s("li",[s("p",[s("font",{attrs:{color:"#1E90FF"}},[s("font",{attrs:{color:"#DD1144"}},[t._v("hash（#）是URL的锚点，代表的是网页中的一个位置，单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页，所以说Hash模式通过锚点值的改变，根据不同的值，渲染指定DOM位置的不同数据")]),t._v("，也就是说hash 出现在 URL 中，但不会被包含在 http 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面；同时每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置；"),s("font",{attrs:{color:"#DD1144"}})],1)],1)]),t._v(" "),s("li",[s("p",[s("font",{attrs:{color:"#DD1144"}},[t._v("hash模式的原理是onhashchange事件(监测hash值变化)，可以在window对象上监听这个事件")])],1)])]),t._v(" "),s("p",[s("font",{attrs:{color:"#9400D3"}},[s("strong",[t._v("② Vue-Router中的Hash")])])],1),t._v(" "),s("ul",[s("li",[s("code",[t._v("vue-router")]),t._v("默认"),s("code",[t._v("hash")]),t._v("模式 —— 使用"),s("code",[t._v("URL")]),t._v("的"),s("code",[t._v("hash")]),t._v("来模拟一个完整的"),s("code",[t._v("URL")]),t._v("，于是当URL改变时，页面不会重新加载")])]),t._v(" "),s("h3",{attrs:{id:"_3-history模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-history模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. History模式")]),t._v(" "),s("p",[t._v("由于"),s("code",[t._v("hash")]),t._v("模式会在"),s("code",[t._v("url")]),t._v("中自带"),s("code",[t._v("#")]),t._v("，这种路由很丑，而且样子也不符合我们去做一个正规网站的需求，我们可以用路由的"),s("code",[t._v("history")]),t._v("模式，只需要在配置路由规则时，加入"),s("code",[t._v("\"mode: 'history'\"")]),t._v("。")]),t._v(" "),s("p",[s("font",{attrs:{color:"#9400D3"}},[s("strong",[t._v("① History原理")])])],1),t._v(" "),s("ul",[s("li",[s("font",{attrs:{color:"#DD1144"}},[t._v("这种模式充分利用了html5 history interface 中新增的pushState()和replaceState()方法。这两个方法应用于浏览器记录栈，在当前已有的back、forward、go基础之上，它们提供了对历史记录修改的功能。只是当它们执行修改时，虽然改变了当前的URL，但浏览器不会立即向后端发送请求")])],1)]),t._v(" "),s("p",[s("font",{attrs:{color:"#9400D3"}},[s("strong",[t._v("② Vue-Router中的History")])])],1),t._v(" "),s("ul",[s("li",[s("p",[t._v("在"),s("code",[t._v("Vue-Router")]),t._v("中使用"),s("code",[t._v("history")]),t._v("模式时，"),s("code",[t._v("URL")]),t._v("就像正常的"),s("code",[t._v("url")]),t._v("，"),s("font",{attrs:{color:"#DD1144"}},[t._v("你要在服务端增加一个覆盖所有情况的候选资源：如果URL匹配不到任何静态资源，则应该返回同一个index.html页面，这个页面就是你app依赖的页面，否则就会返回 404，这就不好看了")])],1),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" routes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"homeLink"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Home"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/register"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"registerLink"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Register"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/login"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"loginLink"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Login"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" redirect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用路由模块来实现页面跳转有三种方式")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("直接修改地址栏")])]),t._v(" "),s("li",[s("code",[t._v("this.$router.push(‘路由地址’)")])]),t._v(" "),s("li",[s("code",[t._v('<router-link to="路由地址"></router-link>')])])])])]),t._v(" "),s("p",[s("strong",[t._v("参考资料")])]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5b08c9ccf265da0dd527d98d",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-router原理剖析"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5ae95896f265da0b84553bd7",target:"_blank",rel:"noopener noreferrer"}},[t._v("你需要知道的单页面路由实现原理"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://coding.imooc.com/class/419.html?mc_marking=4cd147ccf2ff2ca7d226ce6dc286e465&mc_channel=syszxl",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何用js来实现hash和history路由"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5e456513f265da573c0c6d4b",target:"_blank",rel:"noopener noreferrer"}},[t._v("带你全面分析vue-router源码（万字长文）"),s("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=n.exports}}]);