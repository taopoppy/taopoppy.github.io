(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{235:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"（类型）类型拓展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（类型）类型拓展","aria-hidden":"true"}},[t._v("#")]),t._v(" （类型）类型拓展")]),t._v(" "),s("p",[t._v("当我们全面细致的了解个7个类型后，我们还需要去了解的其他的，比如怎么去判断类型，类型转化的复杂性，以及当我们从内存的角度去看这些类型时，它们有哪些特点")]),t._v(" "),s("h2",{attrs:{id:"两大类型的不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两大类型的不同","aria-hidden":"true"}},[t._v("#")]),t._v(" 两大类型的不同")]),t._v(" "),s("h3",{attrs:{id:"_1-可变性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-可变性","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 可变性")]),t._v(" "),s("p",[t._v("我们首先要明确，"),s("font",{attrs:{color:"#3eaf7c"}},[t._v("6个基本类型是具有不可变性的，而1个引用类型是具有可变性的")])],1),t._v(" "),s("ul",[s("li",[s("strong",[t._v("基本类型的不可变性")])])]),t._v(" "),s("p",[t._v("如果你刚开始听到这个概念你也许会迷惑，因为在开发过程中，基本类型有时候是不变的，有时候会变，比如我们在使用字符串的各种方法都会返回新的字符串，并没有改变值，但是我们如果直接改变字符串，字符串又是可变的，如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi  没有变化")]),t._v("\nstr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'6'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi6 变化了")]),t._v("\n")])])]),s("p",[t._v("尽管你看的现象是这样的，但在内存中发生的变化并非你看到的这样，内存空间中的栈内存具有以下特点:")]),t._v(" "),s("ul",[s("li",[t._v("存储的值大小固定")]),t._v(" "),s("li",[t._v("空间较小")]),t._v(" "),s("li",[t._v("可以直接操作其保存的变量，运行效率高")]),t._v(" "),s("li",[t._v("由系统自动分配存储空间")])]),t._v(" "),s("p",[s("font",{attrs:{color:"#3eaf7c"}},[t._v("Javascript中的原始类型的值被直接存储在栈中，在变量定义时，栈就为其分配好了内存空间,由于栈中的内存空间的大小是固定的，那么注定了存储在栈中的变量就是不可变的,这就是基本类型的不可变性的概念")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/stack1.png"),alt:"stack1"}})],1),t._v(" "),s("p",[t._v("在上面的代码中，我们执行了str += '6'的操作，实际上是在栈中又开辟了一块内存空间用于存储新的基本类型值'ConardLi6'，然后将变量str指向这块空间，所以这并不违背不可变性的特点。所以我们从代码的角度感觉变量名没有变，变量的值变化了，但是实际上是变量名在动态的指向新的内存空间。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/stack2.png"),alt:"stack2"}}),t._v("\n总结："),s("font",{attrs:{color:"#3eaf7c"}},[t._v("基本类型的不可变性指已分配好的内存空间中的基本类型的值不会发生突变，因为变量名会动态的指向新的内存空间，所以会造成基本类型的值会在原来的基础上发生变化的错觉")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("引用类型的可变性")])])]),t._v(" "),s("p",[t._v("相对于上面具有不可变性的原始类型，我习惯把对象称为引用类型，引用类型的值实际存储在堆内存中，堆内存有以下特点：")]),t._v(" "),s("ul",[s("li",[t._v("存储的值大小不定，可动态调整")]),t._v(" "),s("li",[t._v("空间较大，运行效率低")]),t._v(" "),s("li",[t._v("无法直接操作其内部存储，使用引用地址读取")]),t._v(" "),s("li",[t._v("通过代码进行分配空间")])]),t._v(" "),s("p",[t._v("引用类型在栈中只存储了一个固定长度的地址，这个地址指向堆内存中的值。我们写一个简短的Demo，来看看内存中的情况")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ConardLi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("obj3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("img",{attrs:{src:t.$withBase("/heap.png"),alt:"heap"}}),t._v(" "),s("p",[t._v("由于内存是有限的，这些变量不可能一直在内存中占用资源，我们在"),s("a",{attrs:{href:"https://www.taopoppy.cn/Front-end/javascriptKnowladge_GarbageCollection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS中的垃圾回收和内存泄漏"),s("OutboundLink")],1),t._v("中会讲述"),s("code",[t._v("JavaScript")]),t._v("是如何进行垃圾回收以及可能会发生内存泄漏的一些场景。")]),t._v(" "),s("h3",{attrs:{id:"_3-复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 复制")]),t._v(" "),s("p",[t._v("当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的，下面我们分别来看看两者的不同:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("基本类型的复制")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nname2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi;")]),t._v("\n")])])]),s("img",{attrs:{src:t.$withBase("/copy1.png"),alt:"copy"}}),t._v(" "),s("p",[t._v("内存中有一个变量"),s("code",[t._v("name")]),t._v("，值为"),s("code",[t._v("ConardLi")]),t._v("。我们从变量"),s("code",[t._v("name")]),t._v("复制出一个变量"),s("code",[t._v("name2")]),t._v("，此时在内存中创建了一个块新的空间用于存储"),s("code",[t._v("ConardLi")]),t._v("，虽然两者值是相同的，但是两者指向的内存空间完全不同，这两个变量参与任何操作都互不影响。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("引用类型的复制")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code秘密花园")]),t._v("\n")])])]),s("img",{attrs:{src:t.$withBase("/copy2.png"),alt:"copy"}}),t._v(" "),s("p",[t._v("当我们"),s("font",{attrs:{color:"#3eaf7c"}},[t._v("复制引用类型的变量时，实际上复制的是栈中存储的地址")]),t._v("，所以复制出来的obj2实际上和obj指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会受到影响，这就是为什么会有深拷贝和浅拷贝的原因。可以查看"),s("a",{attrs:{href:"https://www.taopoppy.cn/Front-end/javascriptKnowladge_DeepCopyAndShallowCopy.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS中的深拷贝和浅拷贝"),s("OutboundLink")],1),t._v("去了解深拷贝和浅拷贝更多的东西")],1),t._v(" "),s("h3",{attrs:{id:"_4-比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-比较","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 比较")]),t._v(" "),s("p",[t._v("当我们在对两个变量进行比较时，不同类型的变量的表现是不同的：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" name2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("img",{attrs:{src:t.$withBase("/compare.png"),alt:"compare"}}),t._v(" "),s("p",[t._v("对于"),s("font",{attrs:{color:"#3eaf7c"}},[t._v("原始类型")]),t._v("，比较时会直接比较它们的值，如果值相等，即返回true。")],1),t._v(" "),s("p",[t._v("对于"),s("font",{attrs:{color:"#3eaf7c"}},[t._v("引用类型")]),t._v("，比较时会比较它们的引用地址，虽然两个变量在堆中存储的对象具有的属性值都是相等的，但是它们被存储在了不同的存储空间，因此比较值为false")],1),t._v(" "),s("h3",{attrs:{id:"_5-传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-传递","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. 传递")]),t._v(" "),s("p",[t._v("基本类型和引用类型都能作为函数参数去传递，但是它们遵循同一个原则就是: "),s("font",{attrs:{color:"#3eaf7c"}},[t._v("ECMAScript中所有的函数的参数都是按值传递的")])],1),t._v(" "),s("ul",[s("li",[s("strong",[t._v("基本类型的传递")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi")]),t._v("\n")])])]),s("p",[t._v("基本类型的传递和基本类型的复制有关，因为函数参数也是存在函数中的变量，所以函数参数的传递无非就是函数外部的变量复制给函数内部的变量，表现在上述代码中就是函数"),s("code",[t._v("changeValue")]),t._v("外的变量"),s("code",[t._v("name1")]),t._v("复制给函数内的变量"),s("code",[t._v("name")]),t._v(",简单的说就是在函数内部先执行了"),s("code",[t._v("name = name1")]),t._v(",但是函数内部的"),s("code",[t._v("name")]),t._v("和函数外部的"),s("code",[t._v("name1")]),t._v("存储的内存空间不同，所以"),s("code",[t._v("name")]),t._v("的任何操作不会影响"),s("code",[t._v("name1")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("引用类型的传递")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ConardLi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code秘密花园'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//obj指向了堆的新的地址，它的任何修改和obj1再也无关")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ConardLi")]),t._v("\n")])])]),s("p",[t._v("引用类型的参数传递并不是引用传递，而依旧是值传递，因为传递的只是在堆内存的地址。所以在上述代码中函数"),s("code",[t._v("changeValue")]),t._v("中的局部变量"),s("code",[t._v("obj")]),t._v("一开始和外部的"),s("code",[t._v("obj1")]),t._v("是指向堆中同一段内存，所以"),s("code",[t._v("obj")]),t._v("的任何改变都会影响"),s("code",[t._v("obj1")]),t._v(",但是"),s("code",[t._v("obj = {name:'code秘密花园'}")]),t._v("了以后，"),s("code",[t._v("obj")]),t._v("指向了堆中另一个新的内存，此时内部的"),s("code",[t._v("obj")]),t._v("和外部的"),s("code",[t._v("obj1")]),t._v("不再指向相同的地址，任何操作都互不影响。")]),t._v(" "),s("p",[s("strong",[t._v("总结")]),t._v(": "),s("font",{attrs:{color:"#3eaf7c"}},[t._v("函数参数传递的并不是变量的引用，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址")])],1),t._v(" "),s("h2",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("p",[t._v("关于"),s("code",[t._v("Javascript")]),t._v("的类型转化，我们专门开设了一个专题，请到"),s("a",{attrs:{href:"https://www.taopoppy.cn/Front-end/javascriptKnowladge_TypeConversion.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS中的类型转换"),s("OutboundLink")],1),t._v("专题中查看")]),t._v(" "),s("h2",{attrs:{id:"类型判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型判断","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型判断")]),t._v(" "),s("p",[t._v("关于"),s("code",[t._v("Javascript")]),t._v("的类型判断，我们专门开设了一个专题，请到"),s("a",{attrs:{href:"https://www.taopoppy.cn/Front-end/javascriptKnowladge_TypeJudgement.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS中的类型判断"),s("OutboundLink")],1),t._v("专题中查看")]),t._v(" "),s("p",[s("strong",[t._v("参考资料")])]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("你真的掌握变量和类型了吗"),s("OutboundLink")],1)])])],1)},[],!1,null,null,null);a.default=r.exports}}]);