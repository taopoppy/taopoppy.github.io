(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{432:function(_,v,o){"use strict";o.r(v);var t=o(0),r=Object(t.a)({},function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("h1",{attrs:{id:"css-基础篇"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#css-基础篇","aria-hidden":"true"}},[_._v("#")]),_._v(" CSS 基础篇")]),_._v(" "),o("p",[_._v("在学习之前，我们来在"),o("code",[_._v("VSCODE")]),_._v("当中安装几个插件，帮助我们更好的书写"),o("code",[_._v("CSS")])]),_._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("Caniuse")]),_._v(": 查看CSS兼容性")],1),_._v(" "),o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("CSScomb")]),_._v(": 排序CSS属性")],1)]),_._v(" "),o("h2",{attrs:{id:"浏览器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#浏览器","aria-hidden":"true"}},[_._v("#")]),_._v(" 浏览器")]),_._v(" "),o("p",[_._v("世界五大浏览器："),o("code",[_._v("Chrome")]),_._v("、"),o("code",[_._v("Safari")]),_._v("、"),o("code",[_._v("Firefox")]),_._v("、"),o("code",[_._v("Opera")]),_._v("、"),o("code",[_._v("IExplorer/Edge")])]),_._v(" "),o("h3",{attrs:{id:"_1-渲染引擎"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-渲染引擎","aria-hidden":"true"}},[_._v("#")]),_._v(" 1. 渲染引擎")]),_._v(" "),o("p",[o("font",{attrs:{color:"#9400D3"}},[_._v("渲染引擎")]),_._v(": 又名"),o("font",{attrs:{color:"#DD1144"}},[_._v("浏览器内核")]),_._v("，指负责对网页语法解析并渲染成一张可视化页面的解析器。它是浏览器最核心最重要的部位，不同内核对网页语法的解析也有不同，因此同一网页语法在不同内核的浏览器中的渲染效果也可能不同，这就是常说的浏览器差异性。")],1),_._v(" "),o("p",[_._v("上述提到的世界五大浏览器，在自身的发展过程中都使用了一种或多种浏览器内核作为自身的渲染引擎。")]),_._v(" "),o("ul",[o("li",[o("code",[_._v("Google Chrome")]),_._v("："),o("code",[_._v("Webkit")]),_._v("(前期)、"),o("code",[_._v("Blink")]),_._v("(后期)")]),_._v(" "),o("li",[o("code",[_._v("Apple Safari")]),_._v("："),o("code",[_._v("Webkit")])]),_._v(" "),o("li",[o("code",[_._v("Mozilla Firefox")]),_._v("："),o("code",[_._v("Gecko")])]),_._v(" "),o("li",[o("code",[_._v("ASA Opera")]),_._v("："),o("code",[_._v("Presto")]),_._v("(前期)、"),o("code",[_._v("Blink")]),_._v("(后期)")]),_._v(" "),o("li",[o("code",[_._v("Microsoft IExplorer")]),_._v("："),o("code",[_._v("Trident")])]),_._v(" "),o("li",[o("code",[_._v("Microsoft Edge")]),_._v("："),o("code",[_._v("Trident")]),_._v("(前期)、"),o("code",[_._v("Blink")]),_._v("(后期)")])]),_._v(" "),o("h3",{attrs:{id:"_2-渲染过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-渲染过程","aria-hidden":"true"}},[_._v("#")]),_._v(" 2. 渲染过程")]),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[_._v("要了解浏览器页面的渲染过程，首先得知道关键渲染路径。关键渲染路径指浏览器从最初接收请求得到HTML、CSS、JS等资源，然后解析、构建、渲染、布局、绘制、合成，到最后呈现在用户眼前界面的整个过程。")])],1),_._v(" "),o("p",[_._v("页面的渲染过程分为以下几部分。")]),_._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("解析文件")]),_._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#3eaf7c"}},[_._v("HTML解析器将html文件转换为"),o("font",{attrs:{color:"#9400D3"}},[_._v("DOM树")])],1)],1),_._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[_._v("CSS解析器将css文件转换为"),o("font",{attrs:{color:"#9400D3"}},[_._v("CSSOM树")])],1)],1),_._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[_._v("渲染引擎将DOM树和CSSOM树合并生成"),o("font",{attrs:{color:"#9400D3"}},[_._v("渲染树")])],1)],1)])],1),_._v(" "),o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("绘制图层")]),_._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#3eaf7c"}},[_._v("根据渲染树布局("),o("font",{attrs:{color:"#9400D3"}},[_._v("回流")]),_._v(")")],1)],1),_._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[_._v("根据布局绘制("),o("font",{attrs:{color:"#9400D3"}},[_._v("重绘")]),_._v(")")],1)],1)])],1),_._v(" "),o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("合成图层")]),_._v("：\n"),o("ul",[o("li",[o("font",{attrs:{color:"#3eaf7c"}},[_._v("合成图层显示在屏幕上")])],1)])],1)]),_._v(" "),o("p",[_._v("下面我们具体讲解上面这几个过程")]),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[_._v("① 解析文件")])])],1),_._v(" "),o("p",[o("code",[_._v("HTML")]),_._v("文档描述一个页面的结构，浏览器通过"),o("font",{attrs:{color:"#1E90FF"}},[_._v("HTML解析器")]),_._v("将"),o("code",[_._v("HTML")]),_._v("解析成"),o("code",[_._v("DOM")]),_._v("树结构。"),o("code",[_._v("HTML")]),_._v("文档中所有内容皆为节点，各节点间拥有层级关系，彼此相连，构成"),o("code",[_._v("DOM")]),_._v("树。构建"),o("code",[_._v("DOM")]),_._v("树的过程：读取"),o("code",[_._v("HTML")]),_._v("文档的字节(Bytes)，将字节转换成字符(Chars)，依据字符确定标签(Tokens)，将标签转换成节点(Nodes)，以节点为基准构建"),o("code",[_._v("DOM")]),_._v("树。简述为："),o("font",{attrs:{color:"#1E90FF"}},[_._v("字节 -> 字符 -> 标签 -> 节点 -> DOM树")])],1),_._v(" "),o("p",[o("code",[_._v("CSS")]),_._v("文档描述一个页面的表现，浏览器通过"),o("font",{attrs:{color:"#1E90FF"}},[_._v("CSS解析器")]),_._v("将"),o("code",[_._v("CSS")]),_._v("解析成"),o("code",[_._v("CSSOM")]),_._v("树结构，与"),o("code",[_._v("DOM")]),_._v("树结构比较像。"),o("code",[_._v("CSS")]),_._v("文档中所有内容皆为节点，与"),o("code",[_._v("HTML")]),_._v("文档中的节点一一对应，各节点间拥有层级关系，彼此相连，构成"),o("code",[_._v("CSSOM")]),_._v("树。构建"),o("code",[_._v("CSSOM")]),_._v("树的过程：读取"),o("code",[_._v("CSS")]),_._v("文档的字节(Bytes)，将字节转换成字符(Chars)，依据字符确定标签(Tokens)，将标签转换成节点(Nodes)，以节点为基准构建"),o("code",[_._v("CSSOM")]),_._v("树。与"),o("code",[_._v("DOM")]),_._v("树的构建过程完全一致。")],1),_._v(" "),o("p",[_._v("在构建"),o("code",[_._v("DOM")]),_._v("树的过程中，当"),o("code",[_._v("HTML")]),_._v("解析器遇到"),o("code",[_._v("script")]),_._v("时会立即阻塞"),o("code",[_._v("DOM")]),_._v("树的构建，将控制权移交给浏览器的"),o("code",[_._v("JS")]),_._v("引擎，等到"),o("code",[_._v("JS")]),_._v("引擎运行完毕，浏览器才会从中断的地方恢复"),o("code",[_._v("DOM")]),_._v("树的构建。"),o("code",[_._v("script")]),_._v("的脚本加载完成后，"),o("code",[_._v("JS")]),_._v("引擎通过"),o("code",[_._v("DOM API")]),_._v("和"),o("code",[_._v("CSSOM API")]),_._v("操作"),o("code",[_._v("DOM")]),_._v("树和"),o("code",[_._v("CSSOM")]),_._v("树。为何会产生渲染阻塞呢？"),o("font",{attrs:{color:"#DD1144"}},[_._v("其根本原因在于：JS操作DOM后，浏览器无法预测未来DOM的具体内容，为了防止无效操作和节省资源，只能阻塞DOM树的构建")]),_._v("。")],1),_._v(" "),o("img",{attrs:{src:_.$withBase("/react_antd_css_browser.png"),alt:""}}),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[_._v("浏览器的渲染引擎将DOM树和CSSOM树合并生成渲染树，只渲染需显示的节点及其样式。DOM树、CSSOM树和渲染树三者的构建并无先后条件和先后顺序，并非完全独立而是会有交叉并行构建的情况。因此会形成一边加载，一边解析，一边渲染的工作现象。")])],1),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[_._v("② 绘制图层")])])],1),_._v(" "),o("p",[_._v("现在我们要搞清一个特别重要的问题，就是什么是重绘回流：")]),_._v(" "),o("p",[o("font",{attrs:{color:"#DD1144"}},[_._v("进入绘制阶段，遍历渲染树，调用渲染器的paint()在屏幕上绘制内容。根据渲染树布局计算样式，即每个节点在页面中的布局、尺寸等几何属性。HTML默认是流式布局，CSS和JS会打破这种布局，改变DOM的几何属性和外观属性。在绘制过程中，根据渲染树布局，再根据布局绘制，这就是常听常说的回流重绘。")])],1),_._v(" "),o("p",[_._v("在此涉及到两个核心概念：回流、重绘。笔者用两句精简的话分别概括它们。")]),_._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#9400D3"}},[_._v("回流")]),_._v("："),o("font",{attrs:{color:"#DD1144"}},[_._v("几何属性需改变的渲染")])],1),_._v(" "),o("li",[o("font",{attrs:{color:"#9400D3"}},[_._v("重绘")]),_._v("："),o("font",{attrs:{color:"#DD1144"}},[_._v("更改外观属性而不影响几何属性的渲染")])],1)]),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[_._v("当生成渲染树后，至少会渲染一次。在后续交互过程中，还会不断地重新渲染。这时只会回流重绘或只有重绘。因此引出一个定向法则：回流必定引发重绘，重绘不一定引发回流")]),_._v("。")],1),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[_._v("③ 合成图层")])])],1),_._v(" "),o("p",[_._v("将回流重绘生成的图层逐张合并并显示在屏幕上。"),o("font",{attrs:{color:"#DD1144"}},[_._v("上述几个步骤并不是一次性顺序完成的，若DOM或CSSOM被修改，上述过程会被重复执行")]),_._v("。实际上，"),o("code",[_._v("CSS")]),_._v("和"),o("code",[_._v("JS")]),_._v("往往会多次修改"),o("code",[_._v("DOM")]),_._v("或"),o("code",[_._v("CSSOM")]),_._v("，简单来说就是"),o("font",{attrs:{color:"#DD1144"}},[_._v("用户的交互操作引发了网页的重渲染")]),_._v("。")],1),_._v(" "),o("h3",{attrs:{id:"_3-兼容性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-兼容性","aria-hidden":"true"}},[_._v("#")]),_._v(" 3.兼容性")]),_._v(" "),o("p",[_._v("兼容性又名网站兼容性或网页兼容性，指网页在各种浏览器上的显示效果可能不同而产生浏览器和网页间的兼容问题。")]),_._v(" "),o("p",[_._v("说到兼容性，就不得不推荐一个专门为前端开发者定制可查询"),o("code",[_._v("CSS/JS")]),_._v("特性在各种浏览器中兼容性的网站"),o("code",[_._v("Caniuse")]),_._v("，它可很好地保障网页在不同浏览器间的兼容性。有了这个工具可快速地了解使用到的代码在各个浏览器中的效果。所以后续使用"),o("code",[_._v("VScode")]),_._v("编码的过程中都会顺带使用"),o("code",[_._v("Caniuse")]),_._v("查看"),o("code",[_._v("CSS")]),_._v("属性以及选择器的兼容性。")]),_._v(" "),o("p",[_._v("以下聊聊处理"),o("code",[_._v("CSS")]),_._v("兼容性的三种方法，相对处理"),o("code",[_._v("JS")]),_._v("兼容性来说简单到不得了，这也是普遍前端开发者认为"),o("code",[_._v("CSS")]),_._v("简单的原因之一。")]),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[_._v("① 磨平浏览器默认样式")])])],1),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[_._v("每个浏览器的CSS默认样式不尽相同，所以最简单最有效的方法就是对其默认样式初始化。以下推荐两种磨平浏览器默认样式的方法，在接入其他css文件前将其导入，天下太平")])],1),_._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("normalize.css")]),_._v(": 有官网，可以上去查看")],1),_._v(" "),o("li",[o("font",{attrs:{color:"#DD1144"}},[_._v("reset.css")]),_._v("：开发者自定义的默认样式")],1)]),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[_._v("② 插入浏览器私有属性")])])],1),_._v(" "),o("p",[_._v("在使用"),o("code",[_._v("Webpack")]),_._v("打包项目代码的过程中，可接入"),o("font",{attrs:{color:"#9400D3"}},[_._v("postcss-loader")]),_._v("和"),o("font",{attrs:{color:"#9400D3"}},[_._v("postcss-preset-env")]),_._v("，"),o("code",[_._v("postcss-preset-env")]),_._v("内置了"),o("code",[_._v("autoprefixer")]),_._v("，它会依据"),o("code",[_._v("Caniuse")]),_._v("所提供的数据对代码里的"),o("code",[_._v("CSS3")]),_._v("属性批量添加私有属性")],1),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[_._v("如果你经常使用脚手架去开发项目，很多脚手架已经内置了这些配置，所以使用自动化工具的好处就是解决这些没有啥技术含量的问题")])],1),_._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[_._v("③ CSS hack")])])],1),_._v(" "),o("p",[_._v("不重要，也用不到，已经过时。")]),_._v(" "),o("h2",{attrs:{id:"盒模型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#盒模型","aria-hidden":"true"}},[_._v("#")]),_._v(" 盒模型")]),_._v(" "),o("h2",{attrs:{id:"样式计算"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#样式计算","aria-hidden":"true"}},[_._v("#")]),_._v(" 样式计算")])])},[],!1,null,null,null);v.default=r.exports}}]);