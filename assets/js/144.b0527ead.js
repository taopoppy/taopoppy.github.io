(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{331:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"go的工程文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go的工程文件","aria-hidden":"true"}},[t._v("#")]),t._v(" GO的工程文件")]),t._v(" "),a("h2",{attrs:{id:"工作区和gopath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作区和gopath","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作区和GOPATH")]),t._v(" "),a("p",[t._v("在下载安装包之后，安装成功"),a("code",[t._v("GO")]),t._v("语言的时候，我们需要来配置三个环境变量：")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v("GOROOT")]),t._v(":"),a("code",[t._v("Go")]),t._v("语言安装根目录的路径，也就是"),a("code",[t._v("Go")]),t._v("语言的安装路径")],1),t._v(" "),a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v("GOPATH")]),t._v(":若干工作区目录的路径，就是我们自己定义的工作空间")],1),t._v(" "),a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v("GOBIN")]),t._v(":"),a("code",[t._v("GO")]),t._v("程序生成可执行文件的路径")],1)]),t._v(" "),a("p",[t._v("现在我们就有一个非常重要的面试问题："),a("font",{attrs:{color:"#DD1144"}},[t._v("设置GOPATH有什么意义")]),t._v("？")],1),t._v(" "),a("p",[t._v("答："),a("font",{attrs:{color:"#1E90FF"}},[t._v("可以简单的将GOPATH理解成GO语言的工作目录，它的值是一个目录的路径，也可以是多个目录的路径，每个目录都代表GO语言的一个工作区")])],1),t._v(" "),a("p",[t._v("我们需要利用这些工作区，去放置"),a("code",[t._v("Go")]),t._v("语言的"),a("font",{attrs:{color:"#DD1144"}},[t._v("源码文件")]),t._v("（source file），以及安装后的"),a("font",{attrs:{color:"#DD1144"}},[t._v("归档文件")]),t._v("（archive file，即以"),a("code",[t._v(".a")]),t._v("为扩展名的文件）和"),a("font",{attrs:{color:"#DD1144"}},[t._v("可执行文件")]),t._v("（executable file），关于"),a("code",[t._v("GOPATH")]),t._v("和工作区,我们需要知道下面三个知识点:")],1),t._v(" "),a("h3",{attrs:{id:"_1-go源码的组成方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-go源码的组成方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. GO源码的组成方式")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Go")]),t._v("语言的源码也是以代码包为基本组织单位的。在文件系统中，这些代码包其实是与目录一一对应的。由于目录可以有子目录，所以代码包也可以有子包。")])]),t._v(" "),a("li",[a("p",[t._v("一个代码包中可以包含任意个以"),a("code",[t._v(".go")]),t._v("为扩展名的源码文件，这些源码文件都需要被声明属于同一个代码包。代码包的名称一般会与源码文件所在的目录同名。如果不同名，那么在构建、安装的过程中会以代码包名称为准.")])]),t._v(" "),a("li",[a("p",[t._v("每个代码包都会有导入路径。代码包的导入路径是其他代码在使用该包中的程序实体时，需要引入的路径。在实际使用程序实体之前，我们必须使用"),a("code",[t._v("import")]),t._v("先导入其所在的代码包.")])]),t._v(" "),a("li",[a("p",[a("font",{attrs:{color:"#DD1144"}},[t._v("在工作区中，一个代码包的导入路径实际上就是从src子目录，到该包的实际存储位置的相对路径。（参照第二小节（源码安装后的结果）中的那张图）")])],1)])]),t._v(" "),a("h3",{attrs:{id:"_2-源码安装后的结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-源码安装后的结果","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 源码安装后的结果")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("我们都知道，源码文件通常会被放在某个工作区的"),a("code",[t._v("src")]),t._v("子目录下。那么在安装后如果产生了归档文件（以"),a("code",[t._v(".a")]),t._v("为扩展名的文件），就会放进该工作区的 "),a("code",[t._v("pkg")]),t._v("子目录；如果产生了可执行文件，就可能会放进该工作区的"),a("code",[t._v("bin")]),t._v("子目录。")])]),t._v(" "),a("li",[a("p",[t._v("比如一个代码包的源码是放在："),a("code",[t._v("GOPATH/工作区1/src/github.com/labstack/echo")]),t._v("中，则它安装的时候产生的归档文件的路径就是："),a("code",[t._v("GOPATH/工作区1/pkg/linux_adm64/github.com/labstack/echo.a")])])]),t._v(" "),a("li",[a("p",[t._v("归档文件的相对目录与"),a("code",[t._v("pkg")]),t._v("目录之间还有一级目录，叫做平台相关目录。平台相关目录的名称是由"),a("code",[t._v("build")]),t._v("（也称“构建”）的目标操作系统、下划线和目标计算架构的代号组成的。比如，构建某个代码包时的目标操作系统是"),a("code",[t._v("Linux")]),t._v("，目标计算架构是64位的，那么对应的平台相关目录就是   "),a("code",[t._v("linux_amd64")]),t._v("。")])])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/gocore_one_gopath.png"),alt:"工作区和GOPATH"}}),t._v(" "),a("h3",{attrs:{id:"_3-构建和安装的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-构建和安装的过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 构建和安装的过程")]),t._v(" "),a("p",[t._v("构建使用命令"),a("code",[t._v("go build")]),t._v("，安装使用命令"),a("code",[t._v("go install")]),t._v("。构建和安装代码包的时候都会执行编译、打包等操作，并且，这些操作生成的任何文件都会先被保存到某个临时的目录中。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果构建（"),a("code",[t._v("go build")]),t._v("）的是库源码文件，那么操作后产生的结果文件只会存在于临时目录中。这里的构建的主要意义在于检查和验证（或者说对第三方的包代码进行校验）。")])]),t._v(" "),a("li",[a("p",[t._v("安装（"),a("code",[t._v("go install")]),t._v("）操作会先执行构建，然后还会进行链接操作，并且把结果文件搬运到指定目录。")]),t._v(" "),a("ul",[a("li",[t._v("进一步说，如果安装的是库源码文件，那么结果文件（实际上就是归档文件）会被搬运到它所在工作区的"),a("code",[t._v("pkg")]),t._v("目录下的某个子目录中。")]),t._v(" "),a("li",[t._v("如果安装的是命令源码文件，那么结果文件会被搬运到它所在工作区的 "),a("code",[t._v("bin")]),t._v("目录中，或者环境变量GOBIN指向的目录中。")])])])]),t._v(" "),a("h2",{attrs:{id:"命令源码文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令源码文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 命令源码文件")]),t._v(" "),a("p",[t._v("如果说到"),a("font",{attrs:{color:"#DD1144"}},[t._v("命令源码文件")]),t._v("，你可能会一脸蒙蔽，不知道是什么东西，但是说到"),a("code",[t._v("main")]),t._v("函数，你大概不会陌生，实际上命令源码文件的定义如下：")],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("命令源码文件是程序的运行入口，是每个可独立运行的程序必须拥有的。我们可以通过构建或安装，生成与其对应的可执行文件，后者一般会与该命令源码文件的直接父目录同名。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("如果一个源码文件声明属于main包，并且包含一个无参数声明且无结果声明的main函数，那么它就是命令源码文件")])],1)]),t._v(" "),a("h3",{attrs:{id:"_1-命令源码接受参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令源码接受参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 命令源码接受参数")]),t._v(" "),a("p",[t._v("我们直接上一个比较完整的例子，来演示如何拿到启动文件时传来的参数并使用")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.go文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flag"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("StringVar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"everyone"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The greeting object"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("按照上面的写法，我们就直接使用下面的命令启动，就能看到程序执行的结果是："),a("code",[t._v("hello,taopoppy")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" run hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"taopoppy"')]),t._v("\n")])])]),a("ul",[a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("flag包是专门用于接收和解析命令参数的代码包")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("函数flag.StringVar接受4个参数")]),t._v("：\n"),a("ul",[a("li",[t._v("第一个参数用户存储该命令参数值的地址，具体到代码中就是"),a("code",[t._v("va name string")]),t._v("当中的"),a("code",[t._v("name")]),t._v("变量")]),t._v(" "),a("li",[t._v("第二个参数是指定该命令参数的名称，具体到代码中实际上是命令行中"),a("code",[t._v('-name="taopopy"')]),t._v("的"),a("code",[t._v("name")]),t._v("参数")]),t._v(" "),a("li",[t._v("第三个参数指定在未追加该命令参数的默认值，也就是命令行不带"),a("code",[t._v('-name="taopoppy"')]),t._v("，程序会自动给代码中的"),a("code",[t._v("name")]),t._v("变量赋默认值"),a("code",[t._v("everyone")])]),t._v(" "),a("li",[t._v("第四个参数，是命令参数的简短说明")])])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("flag.Parse()是用于真正解析命令参数，并将值赋给相应变量的方法。也就是说flag.StringVar()函数其实是一种申明，flag.Parse()才是那个真正干活的人")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("flag.StringVar()函数的调用必须在所有命令参数存储载体的声明和设置之后，和在读取命令行参数值之前。说白了就是要在var name string和flag.StringVar()之后，在调用name变量之前")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("和flag.StringVar类似的函数flag.String，两者的区别是后者会直接返回一个分配好的变量地址，我们可以修改上面代码为下")]),t._v("："),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flag"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"everyone"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The greeting object"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name中保存的是地址")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])],1)]),t._v(" "),a("h3",{attrs:{id:"_2-自定义参数说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义参数说明","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 自定义参数说明")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.go文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flag"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sex "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("StringVar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"everyone"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"include your name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IntVar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sex"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"include your sex"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("比如说我们现在要启动一个文件，我们知道后面可以跟很多命令参数，但是现在我们不清楚有哪些可以写的参数，这些参数的含义又是什么，我们可以直接使用"),a("code",[t._v("go run xxx.go -help")]),t._v(",只要我们像上面的代码一样正确使用了"),a("code",[t._v("flag")]),t._v("这包中的函数，它就会在命令行中显示这样一种格式的参数说明：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Usage of C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\\Users\\ADMINI~"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\\AppData\\Local\\Temp\\"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("build544414910\\b001\\exe\\hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 地址")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name的参数说明")]),t._v("\n        include your name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"everyone"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sex "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sex的参数说明")]),t._v("\n        include your sex "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nexit status "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("p",[t._v("但是有时候我们想自定义一些我们想用的格式，此时我们需要在代码中做一件事情："),a("font",{attrs:{color:"#DD1144"}},[t._v("对变量flag.Usage重新赋值")]),t._v("。首先，"),a("font",{attrs:{color:"#1E90FF"}},[t._v("我们必须要在flag.Parse()函数执行前完成flag.Usage的赋值")]),t._v("：")],1),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Usage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stderr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Usage of %s:\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"question"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrintDefaults")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后我们重新启动：然后就会按照我们在"),a("code",[t._v("flag.Usage")]),t._v("自定义函数中规定的格式显示参数说明。")]),t._v(" "),a("p",[t._v("不过我们最后还要提醒一下："),a("font",{attrs:{color:"#DD1144"}},[t._v("我们在flag包中的一些函数（StringVar，Parse等等）,实际上都是在调用flag.CommandLine变量的对应方法")])],1),t._v(" "),a("h2",{attrs:{id:"库源码文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#库源码文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 库源码文件")]),t._v(" "),a("p",[t._v("库源码文件是不能被直接运行的源码文件，它仅用于存放程序实体，这些程序实体可以被其他代码使用，关于源码文件的注意点我们总结如下：")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("同目录下的源码文件的代码包声明语句都要一致，它们同属于一个代码包")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("源码文件声明的代码包的名称可以与其所以在的目录名称不同")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("构建生成的结果文件的主名称与其父目录名称一致")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("外部使用import引入该包的时候路径和父目录路径一致")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("外部在代码中真正调用库源码的时候要以库源码内部规定的包声明一致")])],1)])],1)]),t._v(" "),a("p",[a("code",[t._v("Go")]),t._v("语言中对于程序实体访问权限的规则如下："),a("font",{attrs:{color:"#DD1144"}},[t._v("名称的首字母为大写的程序实体才可以被当前包外的代码引用，否则就只能被当前包内的其他代码引用")])],1),t._v(" "),a("h2",{attrs:{id:"程序实体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序实体","aria-hidden":"true"}},[t._v("#")]),t._v(" 程序实体")]),t._v(" "),a("h3",{attrs:{id:"_1-类型推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型推断","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 类型推断")]),t._v(" "),a("p",[a("font",{attrs:{color:"#1E90FF"}},[t._v("Go语言是静态类型的，一旦在初始化变量的时候确定了它的类型，之后就不可能再改变")]),t._v("，但是我们可以在声明变量的时候不指定类型，这样它可以被赋予任何类型的值，这样的原因就是："),a("font",{attrs:{color:"#DD1144"}},[t._v("Go语言中变量类型的确定在编译器完成的")])],1),t._v(" "),a("p",[a("code",[t._v("Go")]),t._v("语言支持两种变量定义的方式：")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v("var完整式")]),t._v("：可以在变量后面跟类型，跟的话变量在书写代码的时候就确定了类型，不写的话，变量只有在编译的时候自动对变量值进行类型推断。")],1),t._v(" "),a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v(":= 短变量定义")]),t._v("："),a("font",{attrs:{color:"#1E90FF"}},[t._v("重声明值可以在短变量定义中出现，并且是在多个变量声明中出现（给新变量赋值，给就变量赋新值）")])],1)]),t._v(" "),a("h3",{attrs:{id:"_2-作用域相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域相关","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 作用域相关")]),t._v(" "),a("p",[a("font",{attrs:{color:"#1E90FF"}},[t._v("一个程序实体的作用域总是会被限制在某个代码块中，而这个作用域最大的用处，就是对程序实体的访问权限的控制")]),t._v("，我们来思考一下：如果一个变量与其外层代码块中的变量重名会出现什么状况？比如下面的代码：")],1),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"package"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    block "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inner"')]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The block is  %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inner")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The block is  %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("实际上对于变量查找的过程，任何程序实体都大概是下面这三个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("首先，代码引用变量的时候总会最优先查找当前代码块中的那个变量，注意，这里的"),a("code",[t._v("当前代码块")]),t._v("仅仅是引用变量的代码所在的那个代码块，并不包含任何子代码块。")]),t._v(" "),a("li",[t._v("其次，如果当前代码块中没有生命以此为名的变量，程序会沿着代码块的嵌套关系，从直接包含当前代码块的那个代码块开始，一层层的查找")]),t._v(" "),a("li",[t._v("一般情况下，程序会一直查到当前代码包代表的代码块，找不到，编译就会出问题（"),a("font",{attrs:{color:"#1E90FF"}},[t._v("特殊情况是，如果我们将代码包导入语句写成了import . XXXX，比如import . fmt，那么在当前源码文件中引用fmt.Printf函数的时候直接用Printf就可以了。这种特殊情况下，程序在查找当前源码文件后会先去查用这种方式导入的那些代码包")]),t._v("）")],1)]),t._v(" "),a("h3",{attrs:{id:"_3-变量重声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量重声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 变量重声明")]),t._v(" "),a("p",[t._v("我们这里有一个特别关键的问题："),a("font",{attrs:{color:"#DD1144"}},[t._v("不同代码块中的重名变量与变量重声明中的变量区别到底在哪儿？")]),t._v("，我们将前者称为: "),a("font",{attrs:{color:"#1E90FF"}},[t._v("可重名变量")])],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("变量重声明中的变量一定是在某一个代码块内的。注意，这里的“某一个代码块内”并不包含它的任何子代码块，否则就变成了“多个代码块之间”。而可重名变量指的正是在多个代码块之间由相同的标识符代表的变量。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("变量重声明是对同一个变量的多次声明，这里的变量只有一个。而可重名变量中涉及的变量肯定是有多个的。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("不论对变量重声明多少次，其类型必须始终一致，具体遵从它第一次被声明时给定的类型。而可重名变量之间不存在类似的限制，它们的类型可以是任意的。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("如果可重名变量所在的代码块之间，存在直接或间接的嵌套关系，那么它们之间一定会存在“屏蔽”的现象。但是这种现象绝对不会在变量重声明的场景下出现。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/go_one_kechongmingbianliang.png"),alt:"可重名变量和变量重声明"}})],1)]),t._v(" "),a("h3",{attrs:{id:"_4-类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-类型断言","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 类型断言")]),t._v(" "),a("p",[t._v("判断一个变量的类型如何判断，我们的答案是："),a("font",{attrs:{color:"#DD1144"}},[t._v("通过类型断言表达式来判断变量类型")]),t._v("：")],1),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" container "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zero"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcontainer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tao"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wang"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tvalue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型断言表达式")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The element is %q.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"contrainer is not type of []string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("关于上述代码中的类型断言表达式的解释如下：")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("它包括了用来把container变量的值转换为空接口值的interface{}(container)。")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v("正式说明一下，类型断言表达式的语法形式是x.(T)。其中的x代表要被判断类型的值。这个值当下的类型必须是接口类型的，不过具体是哪个接口类型其实是无所谓的。所以，当这里的container变量类型不是任何的接口类型时，我们就需要先把它转成某个接口类型的值。如果container是某个接口类型的，那么这个类型断言表达式就可以是container.([]string)。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#3eaf7c"}},[t._v("在 Go 语言中，interface{}代表空接口，任何类型都是它的实现类型。现在你只要知道，任何类型的值都可以很方便地被转换成空接口的值就行了。")])],1)])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("以及一个用于判断前者的类型是否为切片类型 []string 的 .([]string)。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("这个表达式的结果可以被赋给两个变量，在这里由value和ok代表。变量ok是布尔（bool）类型的，它将代表类型判断的结果，true或false。如果是true，那么被判断的值将会被自动转换为[]string类型的值，并赋给变量value，否则value将被赋予nil（即“空”）")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/go_one_interface_change.png"),alt:"类型断言"}})],1)]),t._v(" "),a("h3",{attrs:{id:"_5-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. 类型转换")]),t._v(" "),a("p",[t._v("类型转换表达式的基本写法是"),a("font",{attrs:{color:"#DD1144"}},[t._v("T(x)")]),t._v("：")],1),t._v(" "),a("ul",[a("li",[t._v("其中x可以是一个变量，可以是一个代表值的字面量（比如1.23和struct{}）")]),t._v(" "),a("li",[t._v("x被叫做源值，它的类型叫做源类型，T代表的类型就是目标类型")])]),t._v(" "),a("p",[t._v("关于类型转换我们知道在"),a("code",[t._v("Go")]),t._v("语言中只有强制类型转换，转换的规则可以参见"),a("a",{attrs:{href:"https://golang.google.cn/ref/spec#Conversions",target:"_blank",rel:"noopener noreferrer"}},[t._v("语言规范"),a("OutboundLink")],1),t._v(",如果你还不太了解关于编码的知识，我建议你先到本文的最后去看一下符合和编码的知识，再来看这里的类型转换，我们这里讲三个关键的转换的问题；")]),t._v(" "),a("p",[a("font",{attrs:{color:"#1E90FF"}},[a("strong",[t._v("① 整数类型值、整数常量之间的类型转换")])])],1),t._v(" "),a("p",[t._v("原则上只要源值在目标类型的可表示范围内就是合法的，但是我们要深入计算机对整数的运算过程，我们来看下面这个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" srcInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndstInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("srcInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),a("ul",[a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("整数在 Go 语言以及计算机中都是以补码的形式存储的。这主要是为了简化计算机对整数的运算过程。补码其实就是原码各位求反再加 1。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("比如，int16类型的值-255的补码是1111111100000001。如果我们把该值转换为int8类型的值，那么 Go 语言会把在较高位置（或者说最左边位置）上的 8 位二进制数直接截掉，从而得到00000001。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("又由于其最左边一位是0，表示它是个正整数，以及正整数的补码就等于其原码，所以dstInt的值就是1。")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("一定要记住，当整数值的类型的有效范围由宽变窄时，只需在补码形式下截掉一定数量的高位二进制数即可。类似的快刀斩乱麻规则还有：当把一个浮点数类型的值转换为整数类型值时，前者的小数部分会被全部截掉。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/go_one_zhuanghuan.png"),alt:"整数之间的转换"}})],1)]),t._v(" "),a("p",[a("font",{attrs:{color:"#1E90FF"}},[a("strong",[t._v("② string和切片类型之间的互换")])])],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("一个值从string类型向[]byte类型转换时代表以UTF-8编码的字符串会被拆分成零散，独立的字节，byte实际是uint8类型的别名")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"#DD1144"}},[t._v("一个值从string类型向[]rune类型转换时会代表着字符串会被拆分成为一个个Unicode字符，rune实际上是int32类型的别名")])],1)]),t._v(" "),a("p",[t._v("如果你能理解上面的两句话的意思，那么我相信你也理解了我们之前所讲的"),a("a",{attrs:{href:"https://www.taopoppy.cn/go/go_one_container.html#_3-%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符和字符串处理"),a("OutboundLink")],1),t._v(",即使如此，我们下面还会用代码继续演示一遍，帮助大家记忆和理解的更牢固：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫james"')]),t._v("\n\n\tbytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换成为utf8单个字节的源码，单个字节默认以十进制表示")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [230 136 145 229 143 171 106 97 109 101 115]")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" bytes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %d],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// utf8-10进制 [0 230],[1 136],[2 145],[3 229],[4 143],[5 171],[6 106],[7 97],[8 109],[9 101],[10 115]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %X],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// utf8-16进制 [0 E6],[1 88],[2 91],[3 E5],[4 8F],[5 AB],[6 6A],[7 61],[8 6D],[9 65],[10 73]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %b],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// utf8-2进制 [0 11100110],[1 10001000],[2 10010001],[3 11100101],[4 10001111],[5 10101011],[6 1101010],[7 1100001],[8 1101101],[9 1100101],[10 1110011]")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\tunicodes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rune")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认也是以十进制表示单个字符在Unicode字符集中对应的二进制")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unicodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [25105 21483 106 97 109 101 115]")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %d],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-10进制 [0 25105],[3 21483],[6 106],[7 97],[8 109],[9 101],[10 115]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %X],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-16进制 [0 6211],[3 53EB],[6 6A],[7 61],[8 6D],[9 65],[10 73]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %b],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-2进制 [0 110001000010001],[3 101001111101011],[6 1101010],[7 1100001],[8 1101101],[9 1100101],[10 1110011]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %c],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-原始字符 [0 我],[3 叫],[6 j],[7 a],[8 m],[9 e],[10 s]")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" unicodes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %d],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-10进制 [0 25105],[3 21483],[6 106],[7 97],[8 109],[9 101],[10 115]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %X],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-16进制 [0 6211],[3 53EB],[6 6A],[7 61],[8 6D],[9 65],[10 73]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %b],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-2进制 [0 110001000010001],[3 101001111101011],[6 1101010],[7 1100001],[8 1101101],[9 1100101],[10 1110011]")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%d %c],"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode-原始字符 [0 我],[3 叫],[6 j],[7 a],[8 m],[9 e],[10 s]")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"符号和编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#符号和编码","aria-hidden":"true"}},[t._v("#")]),t._v(" 符号和编码")]),t._v(" "),a("h3",{attrs:{id:"_1-ascii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-ascii","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. ASCII")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("我们知道，计算机内部，所有信息最终都是一个二进制值。每一个二进制位（bit）有0和1两种状态，"),a("font",{attrs:{color:"#1E90FF"}},[t._v("因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）")]),t._v("。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从00000000到11111111。\n上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为"),a("code",[t._v("ASCII")]),t._v("码，一直沿用至今。")],1)]),t._v(" "),a("li",[a("p",[a("code",[t._v("ASCII")]),t._v("码一共规定了128个字符的编码，比如空格"),a("code",[t._v("SPACE")]),t._v("是32（二进制00100000），大写的字母"),a("code",[t._v("A")]),t._v("是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为0。")])]),t._v(" "),a("li",[a("p",[t._v("英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。")])]),t._v(" "),a("li",[a("p",[t._v("但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了"),a("code",[t._v("é")]),t._v("，在希伯来语编码中却代表了字母"),a("code",[t._v("Gimel (ג)")]),t._v("，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0--127表示的符号是一样的，不一样的只是128--255的这一段。")])]),t._v(" "),a("li",[a("p",[t._v("至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是 GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 = 65536 个符号")])])]),t._v(" "),a("h3",{attrs:{id:"_2-unicode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-unicode","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Unicode")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。")])]),t._v(" "),a("li",[a("p",[a("font",{attrs:{color:"#DD1144"}},[t._v("可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是 Unicode")]),t._v(".就像它的名字都表示的，这是一种所有符号的编码。")],1)]),t._v(" "),a("li",[a("p",[a("code",[t._v("Unicode")]),t._v("当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字严。具体的符号对应表，可以查询"),a("a",{attrs:{href:"http://www.unicode.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("unicode.org"),a("OutboundLink")],1),t._v("，或者专门的"),a("a",{attrs:{href:"http://www.chi2ko.com/tool/CJK.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉字对应表"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("需要注意的是，"),a("font",{attrs:{color:"#DD1144"}},[t._v("Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储")]),t._v("。")],1)]),t._v(" "),a("li",[a("p",[t._v("比如，汉字严的"),a("code",[t._v("Unicode")]),t._v("是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。")])]),t._v(" "),a("li",[a("p",[t._v("这里就有两个严重的问题:")]),t._v(" "),a("ul",[a("li",[t._v("第一个问题是:"),a("font",{attrs:{color:"#1E90FF"}},[t._v("如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢")]),t._v("？")],1),t._v(" "),a("li",[t._v("第二个问题是:"),a("font",{attrs:{color:"#1E90FF"}},[t._v("我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的")])],1)])]),t._v(" "),a("li",[a("p",[t._v("它们造成的结果是：")]),t._v(" "),a("ul",[a("li",[t._v("出现了"),a("code",[t._v("Unicode")]),t._v("的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示"),a("code",[t._v("Unicode")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("Unicode")]),t._v("在很长一段时间内无法推广，直到互联网的出现。")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-utf-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-utf-8","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. UTF-8")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("互联网的普及，强烈要求出现一种统一的编码方式。"),a("font",{attrs:{color:"#DD1144"}},[t._v("UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式")]),t._v("。其他实现方式还包括"),a("code",[t._v("UTF-16")]),t._v("（字符用两个字节或四个字节表示）和"),a("code",[t._v("UTF-32")]),t._v("（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是:"),a("font",{attrs:{color:"#1E90FF"}},[t._v("UTF-8 是 Unicode 的实现方式之一")]),t._v("。")],1)]),t._v(" "),a("li",[a("p",[a("code",[t._v("UTF-8")]),t._v("最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。"),a("code",[t._v("UTF-8")]),t._v("的编码规则很简单，只有二条：")]),t._v(" "),a("ul",[a("li",[t._v("1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的"),a("code",[t._v("Unicode")]),t._v("码。因此对于英语字母，"),a("code",[t._v("UTF-8")]),t._v("编码和"),a("code",[t._v("ASCII")]),t._v("码是相同的。")]),t._v(" "),a("li",[t._v("2）对于n字节的符号（n > 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的"),a("code",[t._v("Unicode")]),t._v("码。")])])])]),t._v(" "),a("p",[t._v("下表总结了"),a("font",{attrs:{color:"#DD1144"}},[t._v("编码规则表")]),t._v("，字母x表示可用编码的位:\n"),a("img",{attrs:{src:t.$withBase("/gocore_one_jinzhishu.png"),alt:"Unicode和UTF-8"}})],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("计算机解读UTF-8编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符")]),t._v("。")],1),t._v(" "),a("li",[a("font",{attrs:{color:"#1E90FF"}},[t._v("如果第一位是1，则连续有n个1，就表示当前字符占用n个字节，计算机就知道这n个字节应该共同表示的是一个字符")]),t._v("。")],1)]),t._v(" "),a("h3",{attrs:{id:"_4-总结实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结实践","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 总结实践")]),t._v(" "),a("p",[t._v("我们这里要总结一下"),a("code",[t._v("ASCII")]),t._v("、"),a("code",[t._v("Unicode")]),t._v("和"),a("code",[t._v("UTF-8")]),t._v("三者之间的关系，并且通过一个实际的转换案例来巩固：\n"),a("img",{attrs:{src:t.$withBase("/gocore_one_utf_unicode.png"),alt:"utf8和unicode关系"}})]),t._v(" "),a("p",[t._v("下面我们来举个案例：\n"),a("img",{attrs:{src:t.$withBase("/gocore_one_yanzi.png"),alt:"严字的转换过程"}})]),t._v(" "),a("p",[a("font",{attrs:{color:"#1E90FF"}},[t._v("“严”字的 Unicode 是4E25（100111000100101），根据前面的编码规则表，可以发现4E25处在第三行的范围内（0000 0800 - 0000 FFFF），因此严的 UTF-8 编码需要三个字节，即格式是1110xxxx 10xxxxxx 10xxxxxx。然后，从严的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，严的 UTF-8 编码是11100100 10111000 10100101，转换成十六进制就是E4B8A5")])],1),t._v(" "),a("p",[a("strong",[t._v("参考资料")])]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/intro/112",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go语言核心36讲"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000016146377",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go模块简明教程(Go语言依赖包管理工具)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/Deft_MKJing/article/details/79460485?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task",target:"_blank",rel:"noopener noreferrer"}},[t._v("ASCII，Unicode和UTF-8终于找到一个能完全搞清楚的文章了"),a("OutboundLink")],1)])])])},[],!1,null,null,null);s.default=r.exports}}]);