(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{418:function(e,r,o){"use strict";o.r(r);var t=o(0),s=Object(t.a)({},function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"核心模块-process"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#核心模块-process","aria-hidden":"true"}},[e._v("#")]),e._v(" 核心模块 - process")]),e._v(" "),o("h2",{attrs:{id:"进程和线程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程","aria-hidden":"true"}},[e._v("#")]),e._v(" 进程和线程")]),e._v(" "),o("h3",{attrs:{id:"_1-进程和线程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程和线程","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 进程和线程")]),e._v(" "),o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v("进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，")])],1),e._v(" "),o("p",[e._v("进程是线程的容器（来自百科）。我们启动一个服务、运行一个实例，就是开一个服务进程，例如"),o("code",[e._v("Java")]),e._v("里的"),o("code",[e._v("JVM")]),e._v("本身就是一个进程，"),o("code",[e._v("Node.js")]),e._v("里通过"),o("code",[e._v("node app.js")]),e._v("开启一个服务进程，"),o("font",{attrs:{color:"#1E90FF"}},[e._v("多进程就是进程的复制（fork），fork出来的每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了IPC通信，进程之间才可数据共享。")])],1),e._v(" "),o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v("线程是操作系统能够进行运算调度的最小单位，首先我们要清楚线程是隶属于进程的，被包含于进程之中。一个线程只能隶属于一个进程，但是一个进程是可以拥有多个线程的。")])],1),e._v(" "),o("p",[e._v("同一块代码，可以根据系统CPU核心数启动多个进程，每个进程都有属于自己的独立运行空间，进程之间是不相互影响的。"),o("font",{attrs:{color:"#1E90FF"}},[e._v("同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage)")])],1),e._v(" "),o("p",[e._v("线程又有单线程和多线程之分，具有代表性的JavaScript、Java 语言。")]),e._v(" "),o("h3",{attrs:{id:"_2-单线程和多线程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-单线程和多线程","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 单线程和多线程")]),e._v(" "),o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v("单线程就是一个进程只开一个线程，想象一下一个痴情的少年，对一个妹子一心一意用情专一。")])],1),e._v(" "),o("p",[e._v("Javascript 就是属于单线程，程序顺序执行，可以想象一下队列，前面一个执行完之后，后面才可以执行，当你在使用单线程语言编码时切勿有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理。你如果采用 Javascript 进行编码时候，请尽可能的使用异步操作。")]),e._v(" "),o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v("多线程就是没有一个进程只开一个线程的限制，好比一个风流少年除了爱慕自己班的某个妹子，还在想着隔壁班的漂亮妹子。Java 就是多线程编程语言的一种，可以有效避免代码阻塞导致的后续请求无法处理。")])],1),e._v(" "),o("h2",{attrs:{id:"node中线程和进程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node中线程和进程","aria-hidden":"true"}},[e._v("#")]),e._v(" Node中线程和进程")]),e._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[e._v("① 概述")])])],1),e._v(" "),o("p",[o("code",[e._v("Node.js")]),e._v("是"),o("code",[e._v("Javascript")]),e._v("在服务端的运行环境，构建在"),o("code",[e._v("chrome")]),e._v("的"),o("code",[e._v("V8")]),e._v("引擎之上，基于事件驱动、非阻塞I/O模型，充分利用操作系统提供的异步 I/O 进行多任务的执行，适合于 I/O 密集型的应用场景，因为异步，程序无需阻塞等待结果返回，而是基于回调通知的机制，原本同步模式等待的时间，则可以用来处理其它任务，在 Web 服务器方面，著名的 "),o("code",[e._v("Nginx")]),e._v("也是采用此模式（事件驱动），Nginx 采用 C 语言进行编写，主要用来做高性能的 Web 服务器，不适合做业务。Web业务开发中，如果你有高并发应用场景那么"),o("code",[e._v("Node.js")]),e._v(" 会是你不错的选择。")]),e._v(" "),o("p",[e._v("在单核"),o("code",[e._v("CPU")]),e._v("系统之上我们采用"),o("font",{attrs:{color:"#1E90FF"}},[e._v("单进程+单线程")]),e._v("的模式来开发。在多核CPU系统之上，可以通过"),o("code",[e._v("child_process.fork")]),e._v("开启多个进程（Node.js 在 v0.8 版本之后新增了Cluster来实现多进程架构） ，即"),o("font",{attrs:{color:"#DD1144"}},[e._v("多进程+单线程")]),e._v("模式。注意："),o("font",{attrs:{color:"#1E90FF"}},[e._v("开启多进程不是为了解决高并发，主要是解决了单进程模式下 Node.js CPU 利用率不足的情况，充分利用多核 CPU 的性能。")])],1),e._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[e._v("② process")])])],1),e._v(" "),o("p",[o("code",[e._v("Node.js")]),e._v("中的进程"),o("code",[e._v("Process")]),e._v("是一个全局对象，无需"),o("code",[e._v("require")]),e._v("直接使用，给我们提供了当前进程中的相关信息。")]),e._v(" "),o("ul",[o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v(" process.env")]),e._v("：环境变量，例如通过 "),o("code",[e._v("process.env.NODE_ENV")]),e._v("获取不同环境项目配置信息")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("process.nextTick")]),e._v(" ：这个在谈及 Event Loop 时经常为会提到")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("process.pid")]),e._v("：获取当前进程id")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("process.ppid")]),e._v("：当前进程对应的父进程")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("process.cwd()")]),e._v("：获取当前进程工作目录")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("process.platform")]),e._v("：获取当前进程运行的操作系统平台")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("process.uptime()")]),e._v("：当前进程已运行时间，例如："),o("code",[e._v("pm2")]),e._v(" 守护进程的"),o("code",[e._v("uptime")]),e._v("值")],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("进程事件")]),e._v(" ：\n"),o("ul",[o("li",[o("code",[e._v("process.on('uncaughtException', cb)")]),e._v(":捕获异常信息")]),e._v(" "),o("li",[o("code",[e._v("process.on('exit', cb")]),e._v(":进程推出监听")])])],1),e._v(" "),o("li",[o("font",{attrs:{color:"#3eaf7c"}},[e._v("三个标准流")]),e._v("：\n"),o("ul",[o("li",[o("code",[e._v("process.stdout")]),e._v(": 标准输出")]),e._v(" "),o("li",[o("code",[e._v("process.stdin")]),e._v(": 标准输入")]),e._v(" "),o("li",[o("code",[e._v("process.stderr")]),e._v(": 标准错误输出")])])],1)]),e._v(" "),o("p",[o("font",{attrs:{color:"#1E90FF"}},[o("strong",[e._v("③ 总结")])])],1),e._v(" "),o("p",[e._v("关于 Node.js 进程的几点总结：")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("Javascript")]),e._v("是单线程，但是做为宿主环境的"),o("code",[e._v("Node.js")]),e._v("并非是单线程的。")]),e._v(" "),o("li",[e._v("由于单线程原故，一些复杂的、消耗"),o("code",[e._v("CPU")]),e._v("资源的任务建议不要交给"),o("code",[e._v("Node.js")]),e._v("来处理，当你的业务需要一些大量计算、视频编码解码等"),o("code",[e._v("CPU")]),e._v("密集型的任务，可以采用"),o("code",[e._v("C")]),e._v("语言。")]),e._v(" "),o("li",[o("code",[e._v("Node.js")]),e._v("和"),o("code",[e._v("Nginx")]),e._v("均采用事件驱动方式，避免了多线程的线程创建、线程上下文切换的开销。如果你的业务大多是基于"),o("code",[e._v("I/O")]),e._v("操作，那么你可以选择"),o("code",[e._v("Node.js")]),e._v("来开发。")])]),e._v(" "),o("h2",{attrs:{id:"node-js创建进程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-js创建进程","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js创建进程")]),e._v(" "),o("p",[o("code",[e._v("Node.js")]),e._v("提供了"),o("code",[e._v("childprocess")]),e._v("内置模块,可以用来创建子进程，有下面四种方式：")]),e._v(" "),o("ul",[o("li",[o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v(" child_process.spawn()")]),e._v("：适用于返回大量数据，例如图像处理，二进制数据处理。")],1)]),e._v(" "),o("li",[o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v("child_process.exec()")]),e._v(" ：适用于小量数据，"),o("code",[e._v("maxBuffer")]),e._v("默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用"),o("code",[e._v("spawn")]),e._v("。")],1)]),e._v(" "),o("li",[o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v("child_process.execFile()")]),e._v("：类似"),o("code",[e._v("child_process.exec()")]),e._v("，区别是不能通过"),o("code",[e._v("shell")]),e._v("来执行，不支持像I/O重定向和文件查找这样的行为")],1)]),e._v(" "),o("li",[o("p",[o("font",{attrs:{color:"#DD1144"}},[e._v(" child_process.fork()")]),e._v("：衍生新的进程，并调用一个指定的模块，该模块已建立了 IPC 通信通道，允许在父进程与子进程之间发送消息。进程之间是相互独立的，每个进程都有自己的V8实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统"),o("code",[e._v("CPU")]),e._v("核心数设置。。")],1)])]),e._v(" "),o("h3",{attrs:{id:"_1-child-process-spawn"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-child-process-spawn","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. child_process.spawn")]),e._v(" "),o("h3",{attrs:{id:"_2-child-process-fork"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-child-process-fork","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. child_process.fork")]),e._v(" "),o("h3",{attrs:{id:"_3-child-process-exec"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-child-process-exec","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. child_process.exec")]),e._v(" "),o("h3",{attrs:{id:"_4-child-process-execfile"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-child-process-execfile","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. child_process.execFile")]),e._v(" "),o("p",[o("strong",[e._v("参考资料")])]),e._v(" "),o("ol",[o("li",[o("a",{attrs:{href:"https://juejin.im/post/5b0e97bef265da0914072515",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js process 模块解读"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://juejin.im/post/5a996a87f265da239d48bebc",target:"_blank",rel:"noopener noreferrer"}},[e._v("node的process以及child_process"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://juejin.im/post/5848ee3c8e450a006aad306b",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nodejs进阶：如何玩转子进程（child_process）"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://juejin.im/post/5b10a814f265da6e2a08a6f7",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js child_process模块解读"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://juejin.im/post/5d43017be51d4561f40adcf9",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解Node.js 中的进程与线程"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://juejin.im/post/5d468e056fb9a06b17779927",target:"_blank",rel:"noopener noreferrer"}},[e._v("你觉得Node.js是单线程这个结论对吗？"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://www.nodejs.red/#/nodejs/process-threads",target:"_blank",rel:"noopener noreferrer"}},[e._v("进程和线程"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://mp.weixin.qq.com/s/m0flEyU1zG2uTxuZNfMJFQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js进阶之进程与线程"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://mp.weixin.qq.com/s/dKN95zcRI7qkwGYKhPXrcg",target:"_blank",rel:"noopener noreferrer"}},[e._v("分享 10 道 Nodejs 进程相关面试题"),o("OutboundLink")],1)])])])},[],!1,null,null,null);r.default=s.exports}}]);